git 초반 세팅
  - 폴더 PowerShell 실행
  - git config --global user.email "이메일@gmail.com"
  - git config --global user.name "이름"
  해서 사용자 등록

  - git init 해서 폴더 모니터링 등록

  - git add [파일명.확장자명] 해서 파일등록
  - git commit -m '메모내용' 작성

  - 추가내용 Append 도 동일하게
  - git add [파일명.확장자명] 하여, 파일등록
  - git commit -m '메모내용' 작성 으로, 추가내용 작성

git의 개념은

작업폴더 ( 로컬 ) -> [git add] staging area(스테이징 에리어, 작업공간) - [git commit] repository (저장소)

폴더를 여러개 하려면, git add [파일명.확장자명] [파일명.확장자명] ... 이렇게 길게
폴더안에 모두를 넣으려면 git add [.] 전체

git status 상태창 확인
  모디파이드 정보랑 신규파일 등 확인됨

git log --all --oneline
  - --all 은 전체
  - --oneline 은 요약정보, 없으면 상세정보까지 다 보임

vsCode 좌측에 git 아이콘을 쓸 수 있음

git diff 
  => 현재커밋과 마지막 커밋과의 차이점을 알려준다.
  => 코드가 길거나, 복잡하면 가독성이 좀 떨어진다.
  => 건들지 않은 부분도 보여준다.

git difftool
  => vim을 호출해서 이분할 화면으로 비교할 수 있게 해준다.
  => h j k l 방향키
  => :q 아니면 :qa 입력 시 종료

git difftool [Commit Id]
  => git log 에서 Id 확인 가능
  => 각 CommitId 별 비교 해줌, CommitId는 최대 2개만 가능하다

그 외 확장프로그램도 되게 많다.

git add를 취소하려면 git reset head [파일명] 을 한다.
  = [파일명]을 빼면 전체가 초기화된다.

branch 개념
  - Commit의 복사본을 하나 만들어서, 거기다가 코드를 짜는 방식

git switch main => 메인 브렌치로 이동, 새로만든 파일이 사라진다.

합칠때 Conflict 이 발생가능함, 그런경우 소스를 비교해서 정상으로 처리 한 뒤, 다시 git add git commit 하면됨

브렌치의 4 종류
  3-way merge
    - main 과 subbranch에 모두 commit이 있는 경우, 비교해서 merge
  Fast-Forward merge 
    - main 은 커밋이 없고 subbranch에만 commit이 있는 경우, 이런 경우 merge 하면 sub branch가 main이 된다.
    - 이게 자동으로 작동되는게 싫으면 git merge --no-ff [브린치명] 을 하면 자동으로 되지 않는다.
  rebase and merge
    - main 을 신규커밋으로 옮기고 나서 (rebase) 하고 나서 fast forward merge를 작동함.
    - 3way 가 너무 복잡해져서 그렇게 되지 않게 하기 위해 씀
    - conflict 에러 많이 남
    - 새로운 브렌치로 이동해서, git rebase [중심브렌치명] 해서 변경하고, git merge 해야함.
  squash and merge
    - 나중이 되면 commit 내역이 조금 지저분해짐
    - git merge --squash [브렌치명]
    - 하면 새로운 브렌치에 저장된다. 즉 sub 브렌치의 이력이 커밋되지 않는 상태


브렌치 삭제 방법
  git branch -d [브랜치명] 하여, 삭제처리
    merge를 안한건 -D 로 대문자로 해줘야함
  git branch [-r] [-a] 명령어 사용
    - [-r] 리모트 브렌치만 보기
    - [-a] Default 전체 브렌치 보기
  
  git log가 가장 마지막걸 왜 안보여주는거 같지

  파일 돌리는 방법
    git restore [파일명]
    git restore --source [커밋명] [파일명] 을 하면 해당 커밋시간으로 파일이 복구됨
    git restore --staged [파일명] add를 취소한다. 스테이징에 가있는 파일을 돌려보낸다.  reset과 비슷한듯

  Commit 취소하기
    git revert [커밋명]
      commit 메시지 수정가능.
    최근 거 취소하는건 git revert head
    merge commit 도 취소가능

  git reset --hard [커밋명]
    - 해당 시점으로 되돌린다.
    - log가 모두 돌아가기 떄문에, 공용에선 사용하면안된다.
    test

git push -u [git 주소] [브렌치]
  github에 push 해주는 명령어
  -u 는 주소를 기억하라는 뜻, 근데 이거 있어도 안되는거 같은데
git remote add [변수명] [변수내용(URL)]
git remote remove [변수명]
